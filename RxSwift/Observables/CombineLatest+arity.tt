//
//  CombineLatest+arity.swift
//  RxSwift
//
//  Created by Krunoslav Zaher on 4/22/15.
//  Copyright Â© 2015 Krunoslav Zaher. All rights reserved.
//

<% for i in 2 ... 8 { %>

// <%= i %>

extension ObservableType {
    /**
    Merges the specified observable sequences into one observable sequence by using the selector function whenever any of the observable sequences produces an element.

    - seealso: [combineLatest operator on reactivex.io](http://reactivex.io/documentation/operators/combinelatest.html)

    - parameter resultSelector: Function to invoke whenever any of the sources produces an element.
    - returns: An observable sequence containing the result of combining elements of the sources using the specified result selector function.
    */
    public static func combineLatest<<%= (Array(1...i).map { "O\($0): ObservableType" }).joined(separator: ", ") %>>
        (<%= (Array(1...i).map { "_ source\($0): O\($0)" }).joined(separator: ", ") %>, resultSelector: @escaping (<%= (Array(1...i).map { "O\($0).Element" }).joined(separator: ", ") %>) -> Element)
        -> ObservableSource<Element, Completed, Error> where <%= (Array(1...i).map { "O\($0).Error == Error, O\($0).Completed == Completed" }).joined(separator: ", ") %> {
        return ObservableSource(run: .run { observer, cancel in
            let _lock = RecursiveLock()

<%= (Array(1...i).map {
"            var _latestElement\($0): O\($0).Element! = nil"
}).joined(separator: "\n") %>

            let _arity: Int = <%= i %>
            var _numberOfValues = 0
            var _numberOfDone = 0
            var _hasValue: [Bool] = [Bool](repeating: false, count: <%= i %>)
            var _isDone: [Bool] = [Bool](repeating: false, count: <%= i %>)

            func next(_ index: Int) {
                if !_hasValue[index] {
                    _hasValue[index] = true
                    _numberOfValues += 1
                }

                if _numberOfValues == _arity {
                    let result = resultSelector(<%= (Array(1...i).map { "_latestElement\($0)" }).joined(separator: ", ") %>)
                    observer(.next(result))
                }
            }

            func fail(_ error: Error) {
                observer(.error(error))
                cancel.dispose()
            }

            func done(_ value: Completed, _ index: Int) {
                if _isDone[index] {
                    return
                }

                _isDone[index] = true
                _numberOfDone += 1

                if _numberOfDone == _arity {
                    observer(.completed(value))
                    cancel.dispose()
                }
            }

<%= (Array(1...i).map {
"            let subscription\($0) = SingleAssignmentDisposable()"
}).joined(separator: "\n") %>
            <% for j in 1...i { %>
            subscription<%= j %>.setDisposable(source<%= j %>.source.subscribe({ event in
                switch event {
                case .next(let value):
                    _latestElement<%= j %> = value
                    next(<%= j - 1 %>)
                case .error(let error):
                    subscription<%= j %>.dispose()
                    fail(error)
                case .completed(let completed):
                    subscription<%= j %>.dispose()
                    done(completed, <%= j - 1 %>)
                }
            }))
            <% } %>
            return Disposables.create([
<%= (Array(1...i).map { "                    subscription\($0)" }).joined(separator: ",\n") %>
            ])
        })
    }
}

extension ObservableType where Element == Any {
    /**
    Merges the specified observable sequences into one observable sequence of tuples whenever any of the observable sequences produces an element.

    - seealso: [combineLatest operator on reactivex.io](http://reactivex.io/documentation/operators/combinelatest.html)

    - returns: An observable sequence containing the result of combining elements of the sources.
    */
    public static func combineLatest<<%= (Array(1...i).map { "O\($0): ObservableType" }).joined(separator: ", ") %>>
        (<%= (Array(1...i).map { "_ source\($0): O\($0)" }).joined(separator: ", ") %>)
        -> ObservableSource<(<%= (Array(1...i).map { "O\($0).Element" }).joined(separator: ", ") %>), Completed, Error>  where <%= (Array(1...i).map { "O\($0).Error == Error, O\($0).Completed == Completed" }).joined(separator: ", ") %> {
        return ObservableSource<(<%= (Array(1...i).map { "O\($0).Element" }).joined(separator: ", ") %>), Completed, Error>.combineLatest(
            <%= (Array(1...i).map { "source\($0)" }).joined(separator: ", ") %>,
            resultSelector: { (<%= (Array(0..<i).map { "$\($0)" }).joined(separator: ", ") %>) }
        )
    }
}

<% } %>
